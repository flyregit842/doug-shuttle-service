// ==================== ÈÅìÊ†ºÂïÜËôüÈ†êÁ¥ÑÁ≥ªÁµ± - Á≤æÁ∞°ÂÆåÊï¥Áâà ====================

// Ê†∏ÂøÉË®≠ÂÆö (ÂøÖÈ†à‰øÆÊîπ)
const LINE_TOKEN = PropertiesService.getScriptProperties().getProperty('LINE_TOKEN');
const LINE_SECRET = PropertiesService.getScriptProperties().getProperty('LINE_SECRET');
const ADMIN_LINE_USER_ID = PropertiesService.getScriptProperties().getProperty('ADMIN_LINE_USER_ID');
const ADMIN_EMAIL = PropertiesService.getScriptProperties().getProperty('ADMIN_EMAIL');
const BOOKING_FORM_URL = 'https://github.com/flyregit842/doug-shuttle-service/blob/main/index.html';
const QUERY_FORM_URL = 'https://github.com/flyregit842/doug-shuttle-service/blob/main/query.html';

// ==================== LINE Webhook ËôïÁêÜ ====================
function doPost(e) {
  try {
    // ÂèñÂæó LINE signature ÂíåË´ãÊ±ÇÂÖßÂÆπ
    const signature = e.parameter && e.parameter['X-Line-Signature'] ? 
      e.parameter['X-Line-Signature'] : 
      (e.postData && e.postData.headers ? e.postData.headers['X-Line-Signature'] : null);
    
    const body = e.postData && e.postData.contents ? e.postData.contents : null;
    
    console.log('Webhook received - Signature:', signature ? 'present' : 'missing');
    console.log('Body length:', body ? body.length : 'missing');
    
    if (!body) {
      console.log('No body content');
      return createResponse('Bad Request');
    }
    
    // Êö´ÊôÇË∑≥ÈÅéÁ∞ΩÂêçÈ©óË≠â‰æÜÊ∏¨Ë©¶Âü∫Êú¨ÂäüËÉΩ
    // if (signature && !verifySignature(signature, body)) return createResponse('Unauthorized');
    
    const events = JSON.parse(body).events;
    console.log('Events received:', events.length);
    
    events.forEach(event => {
      console.log('Processing event type:', event.type);
      if (event.type === 'message' && event.message.type === 'text') {
        console.log('Processing text message:', event.message.text);
        handleTextMessage(event);
      }
    });
    
    return createResponse('OK');
  } catch (error) {
    console.error('doPost error:', error);
    return createResponse('Error');
  }
}

function verifySignature(signature, body) {
  const hash = Utilities.computeHmacSha256Signature(body, LINE_CHANNEL_SECRET);
  const hashBase64 = Utilities.base64Encode(hash);
  return signature === `SHA256=${hashBase64}`;
}

function createResponse(text) {
  return ContentService.createTextOutput(text).setMimeType(ContentService.MimeType.TEXT);
}

// ==================== LINE Bot Ë®äÊÅØËôïÁêÜ ====================
function handleTextMessage(event) {
  const msg = event.message.text.trim();
  const userId = event.source.userId;
  let reply = '';

  // Á∂ÅÂÆöÂäüËÉΩ
  if (msg.match(/^Á∂ÅÂÆö\s*(.+)$/)) {
    const phone = msg.replace(/^Á∂ÅÂÆö\s*/, '').trim();
    if (validatePhone(phone)) {
      const result = bindUser(userId, phone);
      reply = result.success ? `‚úÖ Á∂ÅÂÆöÊàêÂäüÔºÅÊâãÊ©üÔºö${phone}\nÁèæÂú®ÊÇ®ÊúÉÊî∂Âà∞È†êÁ¥ÑÈÄöÁü•ÔºÅ` : `‚ùå Á∂ÅÂÆöÂ§±ÊïóÔºö${result.error}`;
    } else {
      reply = `‚ùå Ê†ºÂºèÈåØË™§\nÊ≠£Á¢∫Ê†ºÂºèÔºöÁ∂ÅÂÆö 0912345678`;
    }
  }
  // Êü•Ë©¢È†êÁ¥Ñ
  else if (msg.includes('Êü•Ë©¢')) {
    const bookings = getUserBookings(userId);
    reply = bookings.length > 0 ? formatBookings(bookings) : `üìù ÁÑ°È†êÁ¥ÑË®òÈåÑ\nÁ´ãÂç≥È†êÁ¥ÑÔºö${FORM_URL}`;
  }
  // È†êÁ¥ÑÁõ∏Èóú
  else if (msg.match(/Êñ∞Â¢û|È†êÁ¥Ñ|Ë®ÇËªä|Âè´Ëªä|Á¥ÑËªä|ÊàëË¶Å.*Ëªä|ÊÉ≥Ë¶Å.*Ëªä|ÈúÄË¶Å.*Ëªä|Ë¶Å.*Êé•ÈÄÅ|Ê©üÂ†¥|ÂéªÊ©üÂ†¥|Âà∞Ê©üÂ†¥|ÈÄÅÊ©ü|Êé•Ê©ü|ÊàëË¶Å.*Ê©ü|ÂåÖËªä|ÊàëË¶Å.*ÂåÖËªä|ÊÉ≥Ë¶Å.*ÂåÖËªä/)) {
    reply = `üìù Á´ãÂç≥È†êÁ¥ÑÔºö${FORM_URL}\n\nüöó ÊúçÂãôÈ†ÖÁõÆÔºö\n‚Ä¢ üõ´ ÈÄÅÊ©üÊúçÂãô\n‚Ä¢ üõ¨ Êé•Ê©üÊúçÂãô\n‚Ä¢ üöê ÂåÖËªäÊúçÂãô\n‚Ä¢ üìã È†êÁ¥ÑÊü•Ë©¢`;
  }
  // ‰øÆÊîπÈ†êÁ¥Ñ
  else if (msg.includes('‰øÆÊîπ') || msg.includes('Á∑®ËºØ')) {
    reply = `‚úèÔ∏è Êü•Ë©¢Ëàá‰øÆÊîπÔºö${QUERY_URL}\n\nËº∏ÂÖ•ÊâãÊ©üÊü•Ë©¢ÂæåÂç≥ÂèØ‰øÆÊîπÊàñÂèñÊ∂à`;
  }
  // ÂèñÊ∂àÈ†êÁ¥Ñ
  else if (msg.includes('ÂèñÊ∂à')) {
    reply = `üö´ ÂèñÊ∂àÈ†êÁ¥ÑÔºö${QUERY_URL}\n\nËº∏ÂÖ•ÊâãÊ©üÂæåÈªûÊìäÂèñÊ∂à\n‚ö†Ô∏è 24Â∞èÊôÇÂÖßÂèñÊ∂àÂèØËÉΩÁî¢ÁîüË≤ªÁî®`;
  }
  // ÂÆ¢ÊúçËÅØÁµ°
  else if (msg.match(/ÂÆ¢Êúç|ËÅØÁµ°|ÈõªË©±|‰∫∫Â∑•/)) {
    reply = `üë®‚Äçüíº ËÅØÁµ°ÂÆ¢Êúç\n\nüî∏ Âä†ÁÆ°ÁêÜÂì°Â•ΩÂèãÔºö\nhttps://line.me/ti/p/~${ADMIN_LINE_USER_ID}\n\nüî∏ ÈõªË©±Ôºö0912-345-678`;
  }
  // Âπ´Âä©ÊàñÊ≠°Ëøé
  else if (msg.match(/Âπ´Âä©|Ë™™Êòé|help|ÈñãÂßã/)) {
    reply = getWelcomeMessage();
  }
  // Êô∫ËÉΩÂõûÊáâ
  else {
    reply = getSmartReply(msg);
  }

  return replyMessage(event.replyToken, reply);
}

function getWelcomeMessage() {
  return `üöó Ê≠°Ëøé‰ΩøÁî®ÈÅìÊ†ºÂïÜËôüÔºÅ

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  üöÄ Âø´ÈÄüÈ†êÁ¥Ñ     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
Ëº∏ÂÖ•„ÄåÈ†êÁ¥Ñ„ÄçÊàñÈªûÊìäÔºö
${FORM_URL}

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  üìã È†êÁ¥ÑÁÆ°ÁêÜ     ‚îÇ  
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚Ä¢ Êü•Ë©¢È†êÁ¥Ñ - Êü•ÁúãÁèæÊúâÈ†êÁ¥Ñ
‚Ä¢ ‰øÆÊîπÈ†êÁ¥Ñ - ËÆäÊõ¥È†êÁ¥ÑË≥áË®ä  
‚Ä¢ ÂèñÊ∂àÈ†êÁ¥Ñ - ÂèñÊ∂àÁèæÊúâÈ†êÁ¥Ñ

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  üîî ÈÄöÁü•Ë®≠ÂÆö     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
Ëº∏ÂÖ•„ÄåÁ∂ÅÂÆö ÊâãÊ©üËôüÁ¢º„Äç
ÁØÑ‰æãÔºöÁ∂ÅÂÆö 0912345678

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  ‚ÑπÔ∏è  ÂÆ¢ÊúçÊîØÊè¥     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚Ä¢ ÂÆ¢Êúç - ËÅØÁµ°Áúü‰∫∫ÂÆ¢Êúç

üí° Èö®ÊôÇËº∏ÂÖ•„ÄåÂπ´Âä©„ÄçÊü•ÁúãÈÅ∏ÂñÆ`;
}

function getSmartReply(msg) {
  const m = msg.toLowerCase();
  
  if (m.match(/È†êÁ¥Ñ|Ë®ÇËªä|Âè´Ëªä|Á¥ÑËªä|Ê©üÂ†¥|ÈÄÅÊ©ü|Êé•Ê©ü|ÂåÖËªä/)) {
    return `üöó È†êÁ¥ÑÊé•ÈÄÅÊúçÂãôÔºü\n\nüìç ÊúçÂãôÈ†ÖÁõÆÔºö\n‚Ä¢ üõ´ ÈÄÅÊ©üÊúçÂãô\n‚Ä¢ üõ¨ Êé•Ê©üÊúçÂãô\n‚Ä¢ üöê ÂåÖËªäÊúçÂãô\n\nÁ´ãÂç≥È†êÁ¥ÑÔºö${FORM_URL}`;
  }
  
  if (m.match(/‰Ω†Â•Ω|ÂìàÂõâ|hello/)) {
    return `ÊÇ®Â•ΩÔºÅÊ≠°Ëøé‰ΩøÁî®ÈÅìÊ†ºÂïÜËôü üöó\n\nËº∏ÂÖ•„ÄåÂπ´Âä©„ÄçÊü•ÁúãÂäüËÉΩÈÅ∏ÂñÆ`;
  }
  
  if (m.match(/Ë¨ùË¨ù|ÊÑüË¨ù/)) {
    return `‰∏çÂÆ¢Ê∞£ÔºÅÂæàÈ´òËààÁÇ∫ÊÇ®ÊúçÂãô üòä\n\nËº∏ÂÖ•„ÄåÂπ´Âä©„ÄçÊü•ÁúãÂäüËÉΩÈÅ∏ÂñÆ`;
  }
  
  return `ü§î Êä±Ê≠âÔºåÊàëÈÇÑÂú®Â≠∏Áøí...\n\nÂ∏∏Áî®ÂäüËÉΩÔºö\nüî∏ È†êÁ¥Ñ - Á´ãÂç≥È†êÁ¥ÑÊé•ÈÄÅ\nüî∏ Êü•Ë©¢È†êÁ¥Ñ - Êü•ÁúãÁèæÊúâÈ†êÁ¥Ñ\nüî∏ ÂÆ¢Êúç - ËÅØÁµ°Áúü‰∫∫ÂÆ¢Êúç\nüî∏ Âπ´Âä© - ÂÆåÊï¥ÂäüËÉΩÈÅ∏ÂñÆ`;
}

function replyMessage(replyToken, message) {
  const url = 'https://api.line.me/v2/bot/message/reply';
  const payload = {
    replyToken: replyToken,
    messages: [{ type: 'text', text: message }]
  };
  
  return UrlFetchApp.fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${LINE_ACCESS_TOKEN}`
    },
    payload: JSON.stringify(payload)
  });
}

// ==================== Ë≥áÊñôÂ∫´ÁÆ°ÁêÜ ====================
function getOrCreateSpreadsheet() {
  let spreadsheetId = PropertiesService.getScriptProperties().getProperty('SPREADSHEET_ID');
  
  if (!spreadsheetId) {
    const ss = SpreadsheetApp.create('ÈÅìÊ†ºÂïÜËôüÈ†êÁ¥ÑÁ≥ªÁµ±');
    spreadsheetId = ss.getId();
    PropertiesService.getScriptProperties().setProperty('SPREADSHEET_ID', spreadsheetId);
    
    // Âª∫Á´ãÈ†êÁ¥ÑË®òÈåÑÂ∑•‰ΩúË°®
    const bookingSheet = ss.getActiveSheet();
    bookingSheet.setName('È†êÁ¥ÑË®òÈåÑ');
    bookingSheet.getRange(1, 1, 1, 12).setValues([
      ['ÊôÇÈñìÊà≥Ë®ò', 'ÂßìÂêç', 'ÊâãÊ©ü', 'ÊúçÂãôÈ°ûÂûã', '‰∏äËªäÂú∞Èªû', '‰∏ãËªäÂú∞Èªû', 'È†êÁ¥ÑÊó•Êúü', 'È†êÁ¥ÑÊôÇÈñì', '‰πòÂÆ¢‰∫∫Êï∏', 'ÂÇôË®ª', 'ÁãÄÊÖã', 'LINEÁî®Êà∂ID']
    ]);
    
    // Âª∫Á´ãLINEÁî®Êà∂Á∂ÅÂÆöÂ∑•‰ΩúË°®
    const userSheet = ss.insertSheet('LINEÁî®Êà∂Á∂ÅÂÆö');
    userSheet.getRange(1, 1, 1, 3).setValues([['LINEÁî®Êà∂ID', 'ÊâãÊ©üËôüÁ¢º', 'Á∂ÅÂÆöÊôÇÈñì']]);
    
    console.log('Ë©¶ÁÆóË°®Â∑≤Âª∫Á´ãÔºåÈÄ£ÁµêÔºö' + ss.getUrl());
  }
  
  return SpreadsheetApp.openById(spreadsheetId);
}

// ==================== È†êÁ¥ÑËôïÁêÜ ====================
function doGet(e) {
  const action = e.parameter.action;
  
  try {
    switch (action) {
      case 'create':
        return handleCreateBooking(e.parameter);
      case 'query':
        return handleQueryBooking(e.parameter);
      case 'update':
        return handleUpdateBooking(e.parameter);
      case 'cancel':
        return handleCancelBooking(e.parameter);
      default:
        return createJSONResponse({success: false, error: 'ÁÑ°ÊïàÊìç‰Ωú'});
    }
  } catch (error) {
    console.error('doGet error:', error);
    return createJSONResponse({success: false, error: error.toString()});
  }
}

function handleCreateBooking(params) {
  const ss = getOrCreateSpreadsheet();
  const sheet = ss.getSheetByName('È†êÁ¥ÑË®òÈåÑ');
  
  const row = [
    new Date(),
    params.name,
    params.phone,
    params.service,
    params.pickup,
    params.dropoff,
    params.date,
    params.time,
    params.passengers || '1',
    params.notes || '',
    'Â∑≤È†êÁ¥Ñ',
    ''
  ];
  
  sheet.appendRow(row);
  
  // Âª∂ÈÅ≤ÁôºÈÄÅÈÄöÁü•
  Utilities.sleep(1000);
  sendCustomerNotification(params);
  sendAdminNotification(params, 'Êñ∞È†êÁ¥Ñ');
  
  return createJSONResponse({success: true, message: 'È†êÁ¥ÑÊàêÂäüÔºÅ'});
}

function handleQueryBooking(params) {
  const ss = getOrCreateSpreadsheet();
  const sheet = ss.getSheetByName('È†êÁ¥ÑË®òÈåÑ');
  const data = sheet.getDataRange().getValues();
  
  const bookings = data.slice(1)
    .filter(row => row[2] === params.phone && row[10] === 'Â∑≤È†êÁ¥Ñ')
    .filter(row => new Date(row[6]) >= new Date(new Date().setHours(0,0,0,0)))
    .map((row, index) => ({
      id: getRowNumber(sheet, row),
      name: row[1],
      phone: row[2],
      service: row[3],
      pickup: row[4],
      dropoff: row[5],
      date: formatDate(row[6]),
      time: row[7],
      passengers: row[8],
      notes: row[9],
      status: row[10]
    }));
  
  return createJSONResponse({success: true, data: bookings});
}

function handleUpdateBooking(params) {
  const ss = getOrCreateSpreadsheet();
  const sheet = ss.getSheetByName('È†êÁ¥ÑË®òÈåÑ');
  
  const row = parseInt(params.id);
  sheet.getRange(row, 2, 1, 9).setValues([[
    params.name, params.phone, params.service, params.pickup, 
    params.dropoff, params.date, params.time, params.passengers, params.notes
  ]]);
  
  Utilities.sleep(1000);
  sendAdminNotification(params, 'È†êÁ¥Ñ‰øÆÊîπ');
  
  return createJSONResponse({success: true, message: '‰øÆÊîπÊàêÂäüÔºÅ'});
}

function handleCancelBooking(params) {
  const ss = getOrCreateSpreadsheet();
  const sheet = ss.getSheetByName('È†êÁ¥ÑË®òÈåÑ');
  
  sheet.getRange(parseInt(params.id), 11).setValue('Â∑≤ÂèñÊ∂à');
  
  Utilities.sleep(1000);
  sendAdminNotification({phone: params.phone}, 'È†êÁ¥ÑÂèñÊ∂à');
  
  return createJSONResponse({success: true, message: 'ÂèñÊ∂àÊàêÂäüÔºÅ'});
}

function createJSONResponse(data) {
  return ContentService.createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON);
}

// ==================== ÈÄöÁü•Á≥ªÁµ± ====================
function sendCustomerNotification(params) {
  const ss = getOrCreateSpreadsheet();
  const userSheet = ss.getSheetByName('LINEÁî®Êà∂Á∂ÅÂÆö');
  const userData = userSheet.getDataRange().getValues();
  
  const user = userData.find(row => row[1] === params.phone);
  if (!user) return;
  
  const message = `üìÖ È†êÁ¥ÑÁ¢∫Ë™çÈÄöÁü•\n\nÊúçÂãôÔºö${params.service}\nÊó•ÊúüÔºö${params.date}\nÊôÇÈñìÔºö${params.time}\n‰∏äËªäÔºö${params.pickup}\n‰∏ãËªäÔºö${params.dropoff}\n\nÊÑüË¨ùÊÇ®ÁöÑÈ†êÁ¥ÑÔºÅ`;
  
  pushMessage(user[0], message);
}

function sendAdminNotification(params, type) {
  const message = `üîî ${type}ÈÄöÁü•\n\nÊâãÊ©üÔºö${params.phone}\nÊúçÂãôÔºö${params.service || ''}\nÊôÇÈñìÔºö${params.date || ''} ${params.time || ''}\n\nË´ãËá≥Ë©¶ÁÆóË°®Êü•ÁúãË©≥Á¥∞Ë≥áÊñô`;
  
  pushMessage(ADMIN_LINE_USER_ID, message);
  
  const subject = `ÈÅìÊ†ºÂïÜËôü - ${type}ÈÄöÁü•`;
  const body = `${type}Ë©≥Á¥∞Ë≥áË®äÔºö\n\nÊâãÊ©üÔºö${params.phone}\nÊúçÂãôÔºö${params.service || ''}\nÊôÇÈñìÔºö${params.date || ''} ${params.time || ''}\n\nË´ãÁôªÂÖ• Google Sheets Êü•ÁúãÂÆåÊï¥Ë≥áÊñô„ÄÇ`;
  
  GmailApp.sendEmail(ADMIN_EMAIL, subject, body);
}

function pushMessage(userId, message) {
  const url = 'https://api.line.me/v2/bot/message/push';
  const payload = {
    to: userId,
    messages: [{ type: 'text', text: message }]
  };
  
  UrlFetchApp.fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${LINE_ACCESS_TOKEN}`
    },
    payload: JSON.stringify(payload)
  });
}

// ==================== Áî®Êà∂Á∂ÅÂÆö ====================
function bindUser(userId, phone) {
  try {
    const ss = getOrCreateSpreadsheet();
    const userSheet = ss.getSheetByName('LINEÁî®Êà∂Á∂ÅÂÆö');
    const data = userSheet.getDataRange().getValues();
    
    const existing = data.find(row => row[0] === userId || row[1] === phone);
    if (existing) {
      if (existing[0] === userId) return {success: false, error: 'Ê≠§LINEÂ∏≥ËôüÂ∑≤Á∂ÅÂÆöÂÖ∂‰ªñÊâãÊ©ü'};
      if (existing[1] === phone) return {success: false, error: 'Ê≠§ÊâãÊ©üÂ∑≤Á∂ÅÂÆöÂÖ∂‰ªñLINEÂ∏≥Ëôü'};
    }
    
    userSheet.appendRow([userId, phone, new Date()]);
    return {success: true};
  } catch (error) {
    return {success: false, error: error.toString()};
  }
}

function getUserBookings(userId) {
  const ss = getOrCreateSpreadsheet();
  const userSheet = ss.getSheetByName('LINEÁî®Êà∂Á∂ÅÂÆö');
  const bookingSheet = ss.getSheetByName('È†êÁ¥ÑË®òÈåÑ');
  
  const userData = userSheet.getDataRange().getValues();
  const user = userData.find(row => row[0] === userId);
  if (!user) return [];
  
  const bookingData = bookingSheet.getDataRange().getValues();
  return bookingData.slice(1)
    .filter(row => row[2] === user[1] && row[10] === 'Â∑≤È†êÁ¥Ñ')
    .filter(row => new Date(row[6]) >= new Date());
}

function formatBookings(bookings) {
  if (bookings.length === 0) return 'üìù ÁõÆÂâçÊ≤íÊúâÈ†êÁ¥ÑË®òÈåÑ';
  
  let message = 'üìã ÊÇ®ÁöÑÈ†êÁ¥ÑË®òÈåÑÔºö\n\n';
  bookings.forEach((booking, index) => {
    message += `${index + 1}. ${booking[3]}\n`;
    message += `   Êó•ÊúüÔºö${formatDate(booking[6])}\n`;
    message += `   ÊôÇÈñìÔºö${booking[7]}\n`;
    message += `   Ë∑ØÁ∑öÔºö${booking[4]} ‚Üí ${booking[5]}\n\n`;
  });
  
  message += `üìù ‰øÆÊîπÈ†êÁ¥ÑÔºö${QUERY_URL}`;
  return message;
}

// ==================== 24Â∞èÊôÇÊèêÈÜí ====================
function send24HourReminders() {
  const ss = getOrCreateSpreadsheet();
  const sheet = ss.getSheetByName('È†êÁ¥ÑË®òÈåÑ');
  const data = sheet.getDataRange().getValues();
  
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const tomorrowStr = formatDate(tomorrow);
  
  const reminders = data.slice(1).filter(row => 
    formatDate(row[6]) === tomorrowStr && row[10] === 'Â∑≤È†êÁ¥Ñ'
  );
  
  reminders.forEach(booking => sendCustomerReminder(booking));
  
  if (reminders.length > 0) {
    sendAdminSummary(reminders);
  }
}

function sendCustomerReminder(booking) {
  const phone = booking[2];
  const ss = getOrCreateSpreadsheet();
  const userSheet = ss.getSheetByName('LINEÁî®Êà∂Á∂ÅÂÆö');
  const userData = userSheet.getDataRange().getValues();
  
  const user = userData.find(row => row[1] === phone);
  if (!user) return;
  
  const message = `üîî ÊòéÊó•È†êÁ¥ÑÊèêÈÜí\n\nÊúçÂãôÔºö${booking[3]}\nÊôÇÈñìÔºö${booking[7]}\n‰∏äËªäÔºö${booking[4]}\n\nË´ãÊ∫ñÊôÇÂá∫ÁôºÔºÅÊúâÂïèÈ°åË´ãËÅØÁµ°ÂÆ¢Êúç„ÄÇ`;
  
  pushMessage(user[0], message);
}

function sendAdminSummary(reminders) {
  let message = `üìä ÊòéÊó•È†êÁ¥ÑÂΩôÁ∏Ω (ÂÖ±${reminders.length}Á≠Ü)\n\n`;
  reminders.forEach((booking, index) => {
    message += `${index + 1}. ${booking[7]} ${booking[1]} (${booking[2]})\n`;
    message += `   ${booking[3]} - ${booking[4]}\n\n`;
  });
  
  pushMessage(ADMIN_LINE_USER_ID, message);
  GmailApp.sendEmail(ADMIN_EMAIL, 'ÈÅìÊ†ºÂïÜËôü - ÊòéÊó•È†êÁ¥ÑÂΩôÁ∏Ω', message);
}

// ==================== ËºîÂä©ÂáΩÊï∏ ====================
function validatePhone(phone) {
  return /^09\d{8}$/.test(phone);
}

function formatDate(date) {
  if (typeof date === 'string') return date;
  return date.toISOString().split('T')[0];
}

function getRowNumber(sheet, targetRow) {
  const data = sheet.getDataRange().getValues();
  for (let i = 0; i < data.length; i++) {
    if (data[i][0] && data[i][1] === targetRow[1] && data[i][2] === targetRow[2]) {
      return i + 1;
    }
  }
  return 0;
}

// ==================== Ë®≠ÂÆöÂáΩÊï∏ ====================
function setup24HourReminderTrigger() {
  ScriptApp.newTrigger('send24HourReminders')
    .timeBased()
    .everyDays(1)
    .atHour(9)
    .create();
  
  console.log('24Â∞èÊôÇÊèêÈÜíËß∏ÁôºÂô®Â∑≤Ë®≠ÂÆöÂÆåÊàêÔºÅ');
}

function createSpreadsheetNow() {
  const ss = getOrCreateSpreadsheet();
  console.log('Ë©¶ÁÆóË°®Â∑≤Âª∫Á´ãÔºÅ');
  console.log('ÈÄ£ÁµêÔºö' + ss.getUrl());
  console.log('IDÔºö' + ss.getId());
}
